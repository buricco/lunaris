.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Paul Vixie.
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)bitstring.3	8.1 (Berkeley) 7/19/93
.\"
.TH BITSTRING 3 "July 19, 1993"
.SH NAME
\fBbit_alloc\fP,
\fBbit_clear\fP,
\fBbit_decl\fP,
\fBbit_ffs\fP,
\fBbit_nclear\fP,
\fBbit_nset,\fP
\fBbit_set\fP,
\fBbitstr_size\fP,
\fBbit_test\fP
\- bit-string manipulation macros
.SH SYNOPSIS
.nf
\fB#include <bitstring.h>\fP

\f2bitstr_t\f1 \f2*\f1
\fBbit_alloc\fP(\f2int\f1 \f2nbits\f1);

\fBbit_decl\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2nbits\f1);

\fBbit_clear\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2bit\f1);

\fBbit_ffc\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2nbits\f1, \f2int\f1 \f2*value\f1);

\fBbit_ffs\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2nbits\f1, \f2int\f1 \f2*value\f1);

\fBbit_nclear\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2start\f1, \f2int\f1 \f2stop\f1);

\fBbit_nset\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2start\f1, \f2int\f1 \f2stop\f1);

\fBbit_set\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2bit\f1);

\fBbitstr_size\fP(\f2int\f1 \f2nbits\f1);

\fBbit_test\fP(\f2bit_str\f1 \f2name\f1, \f2int\f1 \f2bit\f1);
.fi
.SH DESCRIPTION
These macros operate on strings of bits.
.PP
The macro \fBbit_alloc\fP() returns a pointer of type
``\f2bitstr_t\f1 \f2*\f1'' to sufficient space to store
.I nbits
bits, or NULL if no space is available.
.PP
The macro \fBbit_decl\fP() allocates sufficient space to store
.I nbits
bits on the stack.
.PP
The macro \fBbitstr_size\fP() returns the number of elements of type
.I bitstr_t
necessary to store
.I nbits
bits.
This is useful for copying bit strings.
.PP
The macros
\fBbit_clear\fP()
and
\fBbit_set\fP()
clear or set the zero-based numbered bit
.IR bit ,
in the bit string
.IR name .
.PP
The
\fBbit_nset\fP()
and
\fBbit_nclear\fP()
macros set or clear the zero-based numbered bits from
.I start
to
.I stop
in the bit string
.IR name .
.PP
The
\fBbit_test\fP() macro evaluates to non-zero if the zero-based numbered bit
.I bit
of bit string
.I name
is set, and zero otherwise.
.PP
The \fBbit_ffs\fP() macro stores in the location referenced by
.I value
the zero-based number of the first bit set in the array of
.I nbits
bits referenced by
.IR name .
If no bits are set, the location referenced by
.I value
is set to \-1.
.PP
The macro \fBbit_ffc\fP() stores in the location referenced by
.I value
the zero-based number of the first bit not set in the array of
.I nbits
bits referenced by
.IR name .
If all bits are set, the location referenced by
.I value
is set to \-1.
.PP
The arguments to these macros are evaluated only once and may safely
have side effects.
.SH EXAMPLE
.nf
.in +5
#include <limits.h>
#include <bitstring.h>

#define	LPR_BUSY_BIT		0
#define	LPR_FORMAT_BIT		1
#define	LPR_DOWNLOAD_BIT	2
#define	LPR_AVAILABLE_BIT	9
#define	LPR_MAX_BITS		10

make_lpr_available()
{
	bitstr_t bit_decl(bitlist, LPR_MAX_BITS);
	...
	bit_nclear(bitlist, 0, LPR_MAX_BITS - 1);
	...
	if (!bit_test(bitlist, LPR_BUSY_BIT)) {
		bit_clear(bitlist, LPR_FORMAT_BIT);
		bit_clear(bitlist, LPR_DOWNLOAD_BIT);
		bit_set(bitlist, LPR_AVAILABLE_BIT);
	}
}
.fi
.SH SEE ALSO
malloc(3)
